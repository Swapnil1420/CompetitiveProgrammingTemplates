<snippet>
	<content><![CDATA[
struct SuffixArray {
    string s; int n;
    vector<int> SA, RA, tempSA, tempRA, LCP, rank_;

    SuffixArray(const string& str) : s(str), n(str.size()) {
        SA.resize(n);   RA.resize(n);   tempSA.resize(n);
        tempRA.resize(n);   LCP.resize(n);  rank_.resize(n);
        for (int i = 0; i < n; ++i) {
            SA[i] = i;
            RA[i] = (unsigned char)s[i];
        }
        for (int k = 1; k < n; k <<= 1) {
            countingSort(k);
            countingSort(0);
            int r = 0;
            tempRA[SA[0]] = r;
            for (int i = 1; i < n; ++i) {
                int cur1 = RA[SA[i]] , cur2 = (SA[i] + k < n ? RA[SA[i] + k] : -1);
                int prev1 = RA[SA[i - 1]], prev2 = (SA[i - 1] + k < n ? RA[SA[i - 1] + k] : -1);
                if (cur1 != prev1 || cur2 != prev2) ++r;
                tempRA[SA[i]] = r;
            }
            RA = tempRA;
            if (RA[SA[n - 1]] == n - 1) break;
        }
        buildLCP();
    }
    void countingSort(int k) {
        int maxi = max(256, n);
        vector<int> c(maxi + 1, 0);
        for (int i = 0; i < n; ++i) {
            int idx = (SA[i] + k < n ? RA[SA[i] + k] + 1 : 0);
            c[idx]++;
        }
        for (int i = 1; i <= maxi; ++i) c[i] += c[i - 1];
        for (int i = n - 1; i >= 0; --i) {
            int idx = (SA[i] + k < n ? RA[SA[i] + k] + 1 : 0);
            tempSA[--c[idx]] = SA[i];
        }
        SA = tempSA;
    }
    void buildLCP() {
        for (int i = 0; i < n; ++i) rank_[SA[i]] = i;
        for (int i = 0, h = 0; i < n; ++i) {
            if (rank_[i] > 0) {
                int j = SA[rank_[i] - 1];
                while (i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
                LCP[rank_[i]] = h;
                if (h > 0) h--;
            }
        }
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Suffix_Arrays</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
