<snippet>
	<content><![CDATA[
class SuffixArrays {
public:
	const int MAX_N = 100010;
	int n;	string s;
	vector<int> RA, SA, tempRA, tempSA, lcp, rank;
	SuffixArrays() {}
	SuffixArrays(string &str) {
		s = str;
		n = s.length();
		RA.resize(MAX_N);	SA.resize(MAX_N);
		tempRA.resize(MAX_N);	tempSA.resize(MAX_N);
		lcp.resize(MAX_N); rank.resize(MAX_N);
		for (int i = 0; i < n; ++i) {
			RA[i] = s[i];
			SA[i] = i;
		}
		for (int k = 1; k < n; k *= 2) {
			countingSort(k);
			countingSort(0);
			int r = 0;
			tempRA[SA[0]] = r;
			for (int i = 1; i < n; ++i) {
				tempRA[SA[i]] = (RA[SA[i]] == RA[SA[i - 1]] && RA[SA[i] + k] == RA[SA[i - 1] + k]) ? r : ++r;
			}
			for (int i = 0; i < n; ++i) RA[i] = tempRA[i];
			if (RA[SA[n - 1]] == n - 1) break;
		}
		kasai();
	}
	void kasai() {
		for (int i = 0; i < n; ++i) 	rank[SA[i]] = i;
		for (int i = 0, k = 0; i < n; ++i, k = max(k - 1, 0)) {
			if (rank[i] == n - 1) {
				k = 0;	continue;
			}
			int j = SA[rank[i] + 1];
			while (i + k < n && j + k < n && s[i + k] == s[j + k]) ++k;
			lcp[rank[i]] = k;
		}
	}
	void countingSort(int k) {
		int i, t, sum = 0, maxi = max(300, n);
		vector<int> c(MAX_N, 0);
		for (int i = 0; i < n; ++i)	c[i + k < n ? RA[i + k] : 0]++;
		for (int i = 0; i < maxi; ++i) {
			t = c[i];	c[i] = sum;	sum += t;
		}
		for (int i = 0; i < n; ++i) {
			tempSA[c[SA[i] + k < n ? RA[SA[i] + k] : 0]++] = SA[i];
		}
		for (int i = 0; i < n; ++i) {
			SA[i] = tempSA[i];
		}
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Suffix_Arrays</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
